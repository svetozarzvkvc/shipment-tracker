@page "/add-shipment"
@inject NavigationManager Navigation
@inject ShipmentService shipmentService
@inject FlashMessageService flashMessageService
@using ShipmentTracker.Domain
@using ShipmentTracker.Application.DTO
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using ShipmentTracker.UI.Services

<PageTitle>Add new shipment</PageTitle>

<h3>Add new shipment</h3>

<EditForm OnValidSubmit="HandleValidSubmit" Model="shipment">
    <DataAnnotationsValidator />

    <div class="form-group mb-2">
        <label for="shipmentName" class="mb-1">Shipment name:</label>
        <InputText @bind-Value="shipment.ShipmentName" id="ShipmentName" class="form-control" />
        <ValidationMessage For="@(() => shipment.ShipmentName)" />
    </div>

    <div class="form-group mb-2">
        <label for="status" class="mb-1">Status:</label>
        <InputSelect @bind-Value="shipment.Status" id="Status" class="form-control">
            <option value="Away">Away</option>
            <option value="Delivered">Delivered</option>
            <option value="Storage">Storage</option>
        </InputSelect>
        <ValidationMessage For="@(() => shipment.Status)" />
    </div>

    <div class="form-group mb-2">
        <label for="deliveredAt" class="mb-1">Delivered at:</label>
        <InputDate @bind-Value="shipment.DeliveredAt" id="DeliveredAt" class="form-control" disabled="@(shipment.Status != Status.Delivered)" />
        <ValidationMessage For="@(() => shipment.DeliveredAt)" />
    </div>

    <button type="submit" class="btn btn-primary">Add shipment</button>
</EditForm>

@code {
    CreateShipmentDto shipment = new();

    public async Task HandleValidSubmit()
    {
        await shipmentService.InsertShipment(shipment);
        flashMessageService.SetMessage("Shipment created successfully!", "alert-success", 3000);
        Navigation.NavigateTo($"/");
    }

    public void NavigateBack()
    {
        Navigation.NavigateTo("/");
    }
}