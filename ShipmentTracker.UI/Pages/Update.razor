@page "/update-shipment/{shipmentId:guid}"
@inject NavigationManager Navigation
@inject ShipmentService shipmentService
@inject FlashMessageService flashMessageService
@using ShipmentTracker.Domain
@using ShipmentTracker.Application.DTO
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using ShipmentTracker.UI.Services

<PageTitle>Update shipment</PageTitle>

<h3>Update shipment</h3>

<EditForm Model="shipment1" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group mb-2">
        <label for="shipmentName" class="mb-1">Shipment name:</label>
        <InputText @bind-Value="shipment1.ShipmentName" id="ShipmentName" class="form-control" />
        <ValidationMessage For="@(() => shipment1.ShipmentName)" />
    </div>

    <div class="form-group mb-2">
        <label for="status" class="mb-1">Status:</label>
        <InputSelect @bind-Value="shipment1.Status" id="Status" class="form-control">
            <option value="Away">Away</option>
            <option value="Delivered">Delivered</option>
            <option value="Storage">Storage</option>
        </InputSelect>
        <ValidationMessage For="@(() => shipment1.Status)" />

    </div>

    <div class="form-group mb-2">
        <label for="deliveredAt" class="mb-1">Delivered at:</label>
        <InputDate @bind-Value="shipment1.DeliveredAt" id="DeliveredAt" class="form-control" disabled="@(shipment1.Status != Status.Delivered)" />
        <ValidationMessage For="@(() => shipment1.DeliveredAt)" />
    </div>

    <button type="submit" class="btn btn-primary">Edit shipment</button>
</EditForm>

@code {
    [Parameter] public Guid shipmentId { get; set; }

    private ShipmentDto shipment = new();
    private UpdateShipmentDto  shipment1 = new();
    protected override async Task OnInitializedAsync()
    {
        var shipmentFromServer = await shipmentService.GetShipmentById(shipmentId);
        shipment1.Id = shipmentFromServer.Id;
        shipment1.ShipmentName = shipmentFromServer.Name;
        shipment1.Status = Enum.TryParse<Status>(shipmentFromServer.Status, out var parsedStatus) ? parsedStatus : (Status?)null;
        shipment1.DeliveredAt = shipmentFromServer.DeliveredAt;
    }

    public async Task HandleValidSubmit()
    {
        await shipmentService.UpdateShipment(shipment1);
        flashMessageService.SetMessage("Shipment updated successfully!", "alert-success", 3000);
        Navigation.NavigateTo($"/");
    }
}
